正则表达式匹配规则
(1)单字符: 
 .   匹配除了换行以外的所有字符 
 []  匹配如，[aoe] [a-w]集合种的任意一个字符 
 \d  匹配数字[0-9] 
 \D  匹配非数据
 \w  匹配数字、字母、下划线、中文
 \W  匹配非\w
 \s  匹配所有的空白字符
 \S  匹配非空白

(2)数量修饰：
 *  任意多次，大于等于0次 >=0  
 +  至少1次  >=1 
 ?  可有可无 0次或者1次 
 {m}  固定m次
 {m,}  至少m次
 {m,n}  m-n次

(3)边界：
 \b  表示字母数字与非字母数字的边界
 \B  表示字母数字与(非非)字母数字的边界，非字母数字与非字母数字的边界
  $  以某某结尾
  ^  以某某开头

(4)分组：
 ()  视括号里的为一个整体，例如，(ab){3},表示ab重复3次 -- ababab     
                        注意： ab{3},表示最后1个字符重复3次 -- abbb 
 ()  可以匹配<>html标签 , 例如:  
     str='<div>Alex</div>'
     pattern = re.compile(r'<(/w)>\w<(/\1)>')  
     # 其中\1表示第一个用()的分组，把div标签分组匹配，然后内容用\w匹配 
     ret =pattern.search(str)
     print(ret)  # 返回,  <div>Alex</div>
    
(5)贪婪匹配与非贪婪(惰性)匹配：
 .*   例如, a.*b 会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab,这被称为贪婪匹配
 .*?  例如, a.*?b 匹配最短的以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配 aab 和ab ,这就是非贪婪匹配
 .+   贪婪匹配 例如，<.+> 会匹配所有的<>标签
 .+?  惰性匹配 只要匹配到第一个<>标签就返回了，不会再接着往下找了

(6)匹配模式
  re.I  忽略大小写
  re.M  多行匹配,例如字符串是多行的话，就可以需要用多行匹配
  re.S  单行匹配，加上re.S . 就可以匹配换行符 ,例如 pattern = re.compiler(r'(.*)', re.S)
    
  match  从字符串的从头开始匹配
  search  先扫描整个字符串，然后再匹配

(7)正则替换  
  re.sub(正则表达式，替换内容，字符串)
  例如， str = ' i love you ,you love me'        
        ret = re.sub(r'love','hate', str)
        print(ret)  # 返回'i hate you , you hate me'
 
  group 分组匹配，obj.group() 也可以把正则对象的数据拿出来
  
  